# ============================================================
# IRENE VOICE ASSISTANT - ARMv7 EMBEDDED DOCKER BUILD
# ============================================================
# Alpine-based minimal build optimized for Raspberry Pi and embedded devices
# Supports configuration profiles with cross-compilation and minimal dependencies
# 
# Usage:
#   docker build -f Dockerfile.armv7 --platform linux/arm/v7 --build-arg CONFIG_PROFILE=embedded-armv7 .
#   docker build -f Dockerfile.armv7 --platform linux/arm/v7 --build-arg CONFIG_PROFILE=minimal .
#   docker buildx build --platform linux/arm/v7 -f Dockerfile.armv7 --build-arg CONFIG_PROFILE=voice .

# ============================================================
# STAGE 1: BUILD ANALYZER - Runtime Configuration Analysis
# ============================================================
FROM --platform=$BUILDPLATFORM python:3.11-alpine as analyzer

WORKDIR /build-analyzer

# Install minimal dependencies for build analysis (Alpine packages)
RUN apk add --no-cache python3-dev py3-pip

# Copy build analyzer tool and configuration profiles
COPY irene/tools/ irene/tools/
COPY irene/utils/loader.py irene/utils/loader.py
COPY irene/utils/__init__.py irene/utils/__init__.py
COPY irene/__init__.py irene/__init__.py
COPY configs/ configs/
COPY pyproject.toml pyproject.toml

# Copy intent handlers and JSON configurations for validation
COPY irene/intents/handlers/ irene/intents/handlers/
COPY schemas/ schemas/

# Build argument for configuration profile selection
ARG CONFIG_PROFILE=embedded-armv7
ENV CONFIG_PROFILE=${CONFIG_PROFILE}

# Install tomllib for Python < 3.11 compatibility and jsonschema for JSON validation
RUN pip install tomli jsonschema

# Runtime analysis of selected configuration profile
RUN echo "üîç Analyzing configuration profile: ${CONFIG_PROFILE}" && \
    python -m irene.tools.build_analyzer \
    --config configs/${CONFIG_PROFILE}.toml \
    --platform alpine \
    --json > /tmp/build-requirements.json && \
    echo "üìã Build requirements generated successfully"

# Validate intent JSON configurations if intents are enabled
RUN echo "üîç Validating intent JSON configurations..." && \
    python -c "
import json
import sys
try:
    with open('/tmp/build-requirements.json', 'r') as f:
        data = json.load(f)
    intent_files = data.get('intent_json_files', [])
    if intent_files:
        print(f'Found {len(intent_files)} intent JSON files to validate')
        import subprocess
        result = subprocess.run([
            'python', '-m', 'irene.tools.intent_validator', 
            '--validate-all', '--quiet'
        ], capture_output=True, text=True)
        if result.returncode != 0:
            print('‚ùå Intent JSON validation failed:', file=sys.stderr)
            print(result.stdout, file=sys.stderr)
            print(result.stderr, file=sys.stderr)
            sys.exit(1)
        else:
            print('‚úÖ Intent JSON validation passed')
    else:
        print('üìã No intent handlers enabled, skipping JSON validation')
except Exception as e:
    print(f'‚ö†Ô∏è Intent validation check failed: {e}', file=sys.stderr)
    # Continue build - validation issues will be caught later
" && echo "üìã Intent validation completed"

# Extract Alpine-specific dependencies using dynamic metadata queries
RUN python -c "
import json
with open('/tmp/build-requirements.json', 'r') as f:
    data = json.load(f)

# Get Alpine packages from metadata (no hardcoded mapping needed)
alpine_packages = data.get('system_packages', {}).get('alpine', [])

# Write Alpine system packages
with open('/tmp/system-packages.txt', 'w') as f:
    if alpine_packages:
        f.write(' '.join(alpine_packages))
    else:
        f.write('')

# Write Python dependencies
with open('/tmp/python-deps.txt', 'w') as f:
    deps = data.get('python_dependencies', [])
    if deps:
        f.write(' '.join(deps))
    else:
        f.write('')

# Write enabled modules for selective copying
with open('/tmp/python-modules.txt', 'w') as f:
    modules = data.get('python_modules', [])
    f.write('\n'.join(modules))

print(f'üì¶ Alpine packages: {len(alpine_packages)} (from {len(ubuntu_packages)} Ubuntu packages)')
print(f'üêç Python deps: {len(data.get(\"python_dependencies\", []))}')
print(f'üìã Modules: {len(data.get(\"python_modules\", []))}')
print(f'üèóÔ∏è  Alpine packages: {alpine_packages}')
"

# ============================================================
# STAGE 2: DEPENDENCY BUILDER - Cross-Compilation Build
# ============================================================
FROM python:3.11-alpine as builder

WORKDIR /app

# Copy system dependency list from analyzer
COPY --from=analyzer /tmp/system-packages.txt /tmp/system-packages.txt
COPY --from=analyzer /tmp/python-deps.txt /tmp/python-deps.txt
COPY --from=analyzer /tmp/build-requirements.json /tmp/build-requirements.json

# Install build tools for cross-compilation
RUN apk add --no-cache \
    gcc \
    musl-dev \
    linux-headers \
    python3-dev \
    py3-pip

# Install UV package manager
RUN pip install uv

# Install system dependencies (Alpine packages, only if specified)
RUN if [ -s /tmp/system-packages.txt ]; then \
        echo "üîß Installing Alpine system dependencies..." && \
        apk add --no-cache $(cat /tmp/system-packages.txt); \
    else \
        echo "üì¶ No system dependencies required for this profile"; \
    fi

# Copy project files for dependency resolution
COPY pyproject.toml uv.lock ./

# Install Python dependencies with UV (optimized for ARMv7)
RUN if [ -s /tmp/python-deps.txt ]; then \
        echo "üêç Installing Python dependencies with UV (ARMv7 optimized)..." && \
        UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy uv sync $(python -c "
import json
with open('/tmp/build-requirements.json', 'r') as f:
    data = json.load(f)
    deps = data.get('python_dependencies', [])
    if deps:
        print('--extra ' + ' --extra '.join(deps))
"); \
    else \
        echo "üêç Installing base dependencies only..." && \
        UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy uv sync; \
    fi

# ============================================================
# STAGE 3: RUNTIME - Minimal ARMv7 Runtime Image
# ============================================================
FROM python:3.11-alpine as runtime

# Metadata
LABEL maintainer="Irene Voice Assistant Team"
LABEL description="Irene Voice Assistant - ARMv7 Embedded Runtime"
ARG CONFIG_PROFILE=embedded-armv7
LABEL config.profile="${CONFIG_PROFILE}"
LABEL platform="linux/arm/v7"

WORKDIR /app

# Copy analysis results for runtime reference
COPY --from=analyzer /tmp/build-requirements.json /app/build-requirements.json
COPY --from=analyzer /tmp/python-modules.txt /app/python-modules.txt

# Install runtime system dependencies (Alpine, only if they exist)
COPY --from=builder /tmp/system-packages.txt /tmp/system-packages.txt
RUN if [ -s /tmp/system-packages.txt ]; then \
        echo "üîß Installing runtime system dependencies (Alpine)..." && \
        apk add --no-cache $(cat /tmp/system-packages.txt); \
    fi && rm -f /tmp/system-packages.txt

# Copy Python environment from builder
COPY --from=builder /root/.local /root/.local
ENV PATH="/root/.local/bin:$PATH"

# Copy application code (selective copying based on enabled modules)
COPY irene/ irene/
COPY configs/ configs/

# Copy schemas for intent JSON validation at runtime
COPY schemas/ schemas/

# Copy specific configuration profile for runtime
COPY --from=analyzer configs/${CONFIG_PROFILE}.toml /app/runtime-config.toml

# Create non-root user for security (Alpine style)
RUN adduser -D -u 1000 irene && \
    chown -R irene:irene /app
USER irene

# Health check (lightweight for embedded)
HEALTHCHECK --interval=60s --timeout=5s --start-period=10s --retries=2 \
    CMD python -c "import irene; print('‚úÖ Irene ARMv7 is healthy')" || exit 1

# Runtime configuration optimized for embedded
ENV IRENE_CONFIG_FILE=/app/runtime-config.toml
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONOPTIMIZE=2

# Resource limits for embedded devices
ENV MALLOC_TRIM_THRESHOLD_=100000
ENV MALLOC_TOP_PAD_=65536

# Default command (optimized for embedded)
CMD ["python", "-O", "-m", "irene.runners.cli", "--config", "/app/runtime-config.toml"]

# Expose only necessary ports for embedded deployment
EXPOSE 8000 