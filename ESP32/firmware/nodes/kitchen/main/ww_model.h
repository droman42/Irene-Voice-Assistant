#pragma once

#include <cstdint>

// Generated by tools/convert_wake_word_model.py for kitchen node
// Wake word: "jarvis"
// Model: microWakeWord medium-12-bn
// Training samples: 200 positives, 4h negatives
// Validation: 95% recall, <2 false accepts/hour

// Model data (stored in PSRAM)
extern const uint8_t wake_word_model_data[] asm("_binary_jarvis_medium_tflite_start");
extern const uint8_t wake_word_model_data_end[] asm("_binary_jarvis_medium_tflite_end");

// Model metadata
#define WW_MODEL_WAKE_WORD "jarvis"
#define WW_MODEL_SIZE 140000  // ~140KB
#define WW_MODEL_TYPE "medium-12-bn"
#define WW_MODEL_SAMPLE_RATE 16000
#define WW_MODEL_WINDOW_SIZE_MS 1000
#define WW_MODEL_STRIDE_MS 30
#define WW_MODEL_INPUT_SIZE 16000  // 1 second at 16kHz
#define WW_MODEL_OUTPUT_SIZE 1     // Binary classification

// Performance characteristics
#define WW_MODEL_INFERENCE_TIME_MS 25
#define WW_MODEL_MEMORY_USAGE_KB 90
#define WW_MODEL_VALIDATION_RECALL 0.95f
#define WW_MODEL_VALIDATION_FPR 0.002f  // 2 false accepts per hour

// Runtime configuration
#define WW_MODEL_DEFAULT_THRESHOLD 0.9f
#define WW_MODEL_MIN_TRIGGER_DURATION_MS 450
#define WW_MODEL_COOLDOWN_DURATION_MS 400

// Helper function to get model size at runtime
inline size_t get_wake_word_model_size() {
    return (size_t)(wake_word_model_data_end - wake_word_model_data);
} 